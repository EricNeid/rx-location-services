def appVersionName = '0.0.2'
def appVersionCode = 1

def appPackageName = 'rx-location-services'
def compileSdk = ext.compileSdk
def minSdk = ext.minSdk
def targetSdk = ext.targetSdk

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

// javadoc currently breaks with kotlin files and bintray
tasks.withType(Javadoc) {
	enabled = false
}

ext {
	bintrayRepo = 'maven'
	bintrayName = appPackageName

	publishedGroupId = 'org.neidhardt'
	libraryName = appPackageName
	artifact = appPackageName

	libraryDescription = 'A simple wrapper around some of Androids Location APIs.'

	siteUrl = 'https://github.com/EricNeid/rx-location-services'
	gitUrl = 'https://github.com/EricNeid/rx-location-services.git'

	libraryVersion = appVersionName

	developerId = 'combatmage'
	developerName = 'Eric Neidhardt'
	developerEmail = 'eric.neidhardt@gmail.com'

	licenseName = 'MIT'
	licenseUrl = 'https://opensource.org/licenses/MIT'
	allLicenses = ["MIT"]
}

android {
	compileSdkVersion compileSdk

	defaultConfig {
		minSdkVersion minSdk
		targetSdkVersion targetSdk
		versionCode appVersionCode
		versionName appVersionName
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
	}

	buildTypes {
		release {
			minifyEnabled false
		}
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		test.java.srcDirs += 'src/test/kotlin'
		debug.java.srcDirs += 'src/debug/kotlin'
		release.java.srcDirs += 'src/release/kotlin'
	}

	compileOptions {
		sourceCompatibility = '1.8'
		targetCompatibility = '1.8'
	}

	testOptions {
		unitTests.returnDefaultValues = true
	}
}

def androidSupportLibVersion = '27.1.1'
def androidxTestVersion = '1.1.0'

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])

    // android support
    implementation "com.android.support:support-annotations:$androidSupportLibVersion"

	// google play services
	implementation 'com.google.android.gms:play-services-location:16.0.0'

	// rx
	implementation 'io.reactivex.rxjava2:rxjava:2.1.16'
	implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
	implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0'

	// testing
	testImplementation 'junit:junit:4.12'
	testImplementation 'android.arch.core:core-testing:1.1.1'
	testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0'


    androidTestImplementation "androidx.test:runner:$androidxTestVersion"
    androidTestImplementation "androidx.test:rules:$androidxTestVersion"
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

apply plugin: 'com.github.dcendents.android-maven'

// Bintray section
// make sure that you have the following in your local.properties
// bintray.user=<your user name>
// bintray.apikey=<your api key
apply plugin: 'com.jfrog.bintray'

version = libraryVersion

if (project.hasProperty("android")) { // Android libraries
	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from android.sourceSets.main.java.srcDirs
	}

	task javadoc(type: Javadoc) {
		source = android.sourceSets.main.java.srcDirs
		classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
	}
} else { // Java libraries
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
	pom {
		project {
			packaging 'aar'
			groupId publishedGroupId
			artifactId artifact

			// Add your description here
			name libraryName
			description libraryDescription
			url siteUrl

			// Set your license
			licenses {
				license {
					name licenseName
					url licenseUrl
				}
			}
			developers {
				developer {
					id developerId
					name developerName
					email developerEmail
				}
			}
			scm {
				connection gitUrl
				developerConnection gitUrl
				url siteUrl

			}
		}
	}.writeTo("$buildDir/poms/pom-default.xml")

	user = properties.getProperty("bintray.user")
	key = properties.getProperty("bintray.apikey")

	configurations = ['archives']
	pkg {
		repo = bintrayRepo
		name = bintrayName
		desc = libraryDescription
		websiteUrl = siteUrl
		vcsUrl = gitUrl
		licenses = allLicenses
		publish = true
		publicDownloadNumbers = true
		version {
			desc = libraryDescription
			gpg {
				// optional GPG encryption. Default is false.
				sign = false
				//passphrase = properties.getProperty("bintray.gpg.password")
			}
		}
	}
}
